{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Elevate: model-enhanced LLM driven VUI testing on VPA apps Files Tree \u251c\u2500\u2500 code \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 step1_process_document.py \u2502 \u251c\u2500\u2500 step2_test_skill.py \u2502 \u251c\u2500\u2500 step3_detect_problem.py \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 skill \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 util \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 chrome \u2502 \u2514\u2500\u2500 chromedriver_new.exe \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config000.ini \u251c\u2500\u2500 cookie \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 corpus \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 dataset_2022 \u2502 \u251c\u2500\u2500 benchmark.xlsx \u2502 \u2514\u2500\u2500 large_scale_4000.xlsx \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirement.txt code: contains the source code of Elevate chrome: contains the current chromedriver on windows (24th, March, 2024) config: configuration files. dataset_2022: benchmark skills and large-scale skills requirement.txt: requirements of python packages Requirement python package pip install -r requirement.txt python -m spacy download en_core_web_sm environment export OPENAI_API_KEY=<YOUR OPENAI API KEY> Other the chromedriver that matches your chrome version an amazon developer account that can use the simulator (change the config000.ini in config directory to add your acount) an Azure account that can access to the openAI API (change the config000.ini in config directory to add the apibase and apiversion) We need to login to the amazon developer account to start using the simulator. In most of the cases amazon will send an email to your linked email address for verifications. We use pop to read the emails, so make sure the 110 port is open. How to run Elevate cd code python main.py -i <begin index of skill, default as 1> -ei <end index of skill, default as 100> -c <configuration file name in the config directory, default as config000.ini> -e <input skills file in the dataset_2022 directory, default as benchmark.xlsx> -l <path to save communication logs and results, default as ../../output/benchmark> -d <chromedriver name in the chrome directory, default as chromedriver_new.exe> Download Elevate See the Elevate directory for running Elevate. Dataset can also be found here. Output & Experiment The data for experiments can all be found here. Approaches to run the experiments can be found here .","title":"Home"},{"location":"#elevate-model-enhanced-llm-driven-vui-testing-on-vpa-apps","text":"","title":"Elevate: model-enhanced LLM driven VUI testing on VPA apps"},{"location":"#files-tree","text":"\u251c\u2500\u2500 code \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 step1_process_document.py \u2502 \u251c\u2500\u2500 step2_test_skill.py \u2502 \u251c\u2500\u2500 step3_detect_problem.py \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 skill \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 util \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 chrome \u2502 \u2514\u2500\u2500 chromedriver_new.exe \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config000.ini \u251c\u2500\u2500 cookie \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 corpus \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 dataset_2022 \u2502 \u251c\u2500\u2500 benchmark.xlsx \u2502 \u2514\u2500\u2500 large_scale_4000.xlsx \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirement.txt code: contains the source code of Elevate chrome: contains the current chromedriver on windows (24th, March, 2024) config: configuration files. dataset_2022: benchmark skills and large-scale skills requirement.txt: requirements of python packages","title":"Files Tree"},{"location":"#requirement","text":"","title":"Requirement"},{"location":"#python-package","text":"pip install -r requirement.txt python -m spacy download en_core_web_sm","title":"python package"},{"location":"#environment","text":"export OPENAI_API_KEY=<YOUR OPENAI API KEY>","title":"environment"},{"location":"#other","text":"the chromedriver that matches your chrome version an amazon developer account that can use the simulator (change the config000.ini in config directory to add your acount) an Azure account that can access to the openAI API (change the config000.ini in config directory to add the apibase and apiversion) We need to login to the amazon developer account to start using the simulator. In most of the cases amazon will send an email to your linked email address for verifications. We use pop to read the emails, so make sure the 110 port is open.","title":"Other"},{"location":"#how-to-run-elevate","text":"cd code python main.py -i <begin index of skill, default as 1> -ei <end index of skill, default as 100> -c <configuration file name in the config directory, default as config000.ini> -e <input skills file in the dataset_2022 directory, default as benchmark.xlsx> -l <path to save communication logs and results, default as ../../output/benchmark> -d <chromedriver name in the chrome directory, default as chromedriver_new.exe>","title":"How to run Elevate"},{"location":"#download","text":"Elevate See the Elevate directory for running Elevate. Dataset can also be found here. Output & Experiment The data for experiments can all be found here. Approaches to run the experiments can be found here .","title":"Download"},{"location":"experiment/","text":"Experiment Download experiment to do experiments. The elevate_10min, gpt4_chatbot_10min, vitas_10min show the communication logs for Elevate, GPT4(chatbot) and Vitas to test skills for 10 minutes. The ablation1, ablation2, ablation are for ablation studies. The elevate+llama2-70b-chat-hf_10min and llama2-70b-chat-hf_chatbot_10min are communication logs of Elevate-Llama2-70b-chat and Llama2-70b-chat(chatbot) respectively. The large_scale contains the communciation logs of skills in large-scale dataset. The user contains the commucation logs of our user study. The experiment.py file is the source code to do experiments. Study1 Figure 7 shows the comparison of sentence states and semantic states covered by Elevate, GPT4(chatbot) and Vitas. Figure 8 shows the average semantic state coverage rate with varying interaction rounds between Elevate and baselines. It is important to note that the results here show the communication logs of each tool testing 10 minutes. But in the study 1 we compare the semantic state coverage rate of each tool testing for the same number of interaction rounds. To get the semantic/sentence states and average semantic state coverage rate achieved by Elevate and the baselines, run: python experiment.py 1 The results will be shown in study1_1_.xlsx and study1_2.xlsx . Study2 Figure 9 shows the average semantic state coverage rate by Elevate, w/o States extraction, w/o Input events generation and w/o State space exploration. To get the raw data of the ablation study, run: python experiment.py 2 The result will be shown in study2.xlsx . Study3 Figure 10 shows the average semantic state coverage rate achieved by Elevate-Llama2-70b-chat, Vitas and Llama2-70b-chat(chatbot). To get their state coverage rate on the benchmark, run: python experiment.py 3 The result will be shown in study3.xlsx . Study4 Figure 11 shows the comparison of coverage rate achieved by Elevate and Vitas on 4000 skills from all categories. To get the coverage rate of Elevate and Vitas on these 4000 skills, run: python experiment.py 4 The result will be shown in study4.xlsx .","title":"Experiment"},{"location":"experiment/#experiment","text":"Download experiment to do experiments. The elevate_10min, gpt4_chatbot_10min, vitas_10min show the communication logs for Elevate, GPT4(chatbot) and Vitas to test skills for 10 minutes. The ablation1, ablation2, ablation are for ablation studies. The elevate+llama2-70b-chat-hf_10min and llama2-70b-chat-hf_chatbot_10min are communication logs of Elevate-Llama2-70b-chat and Llama2-70b-chat(chatbot) respectively. The large_scale contains the communciation logs of skills in large-scale dataset. The user contains the commucation logs of our user study. The experiment.py file is the source code to do experiments.","title":"Experiment"},{"location":"experiment/#study1","text":"Figure 7 shows the comparison of sentence states and semantic states covered by Elevate, GPT4(chatbot) and Vitas. Figure 8 shows the average semantic state coverage rate with varying interaction rounds between Elevate and baselines. It is important to note that the results here show the communication logs of each tool testing 10 minutes. But in the study 1 we compare the semantic state coverage rate of each tool testing for the same number of interaction rounds. To get the semantic/sentence states and average semantic state coverage rate achieved by Elevate and the baselines, run: python experiment.py 1 The results will be shown in study1_1_.xlsx and study1_2.xlsx .","title":"Study1"},{"location":"experiment/#study2","text":"Figure 9 shows the average semantic state coverage rate by Elevate, w/o States extraction, w/o Input events generation and w/o State space exploration. To get the raw data of the ablation study, run: python experiment.py 2 The result will be shown in study2.xlsx .","title":"Study2"},{"location":"experiment/#study3","text":"Figure 10 shows the average semantic state coverage rate achieved by Elevate-Llama2-70b-chat, Vitas and Llama2-70b-chat(chatbot). To get their state coverage rate on the benchmark, run: python experiment.py 3 The result will be shown in study3.xlsx .","title":"Study3"},{"location":"experiment/#study4","text":"Figure 11 shows the comparison of coverage rate achieved by Elevate and Vitas on 4000 skills from all categories. To get the coverage rate of Elevate and Vitas on these 4000 skills, run: python experiment.py 4 The result will be shown in study4.xlsx .","title":"Study4"}]}